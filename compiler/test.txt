.data
static_instance_1_A:    .byte   0:4
static_instance_3_B:    .byte   0:4
static_instance_5_C:    .byte   0:4
static_instance_7_NSObject:    .byte   0:4
static_instance_9_System:    .byte   0:4

newline: .asciiz "\n"

.text
.globl main
main:
 #reserving space in stack for scope variables
sub $sp,$sp,20
 ##F:code.txt #L:56
 #asm node :la $t0,static_instance_1_A
la $t0,static_instance_1_A

 ##F:code.txt #L:56
 #asm node :li $t1,2
li $t1,2

 ##F:code.txt #L:56
 #asm node :sw $t0,0($gp)
sw $t0,0($gp)

 ##F:code.txt #L:56
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:code.txt #L:56
 #asm node :la $t0,static_instance_3_B
la $t0,static_instance_3_B

 ##F:code.txt #L:56
 #asm node :li $t1,4
li $t1,4

 ##F:code.txt #L:56
 #asm node :sw $t0,-4($gp)
sw $t0,-4($gp)

 ##F:code.txt #L:56
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:code.txt #L:56
 #asm node :la $t0,static_instance_5_C
la $t0,static_instance_5_C

 ##F:code.txt #L:56
 #asm node :li $t1,6
li $t1,6

 ##F:code.txt #L:56
 #asm node :sw $t0,-8($gp)
sw $t0,-8($gp)

 ##F:code.txt #L:56
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:code.txt #L:56
 #asm node :la $t0,static_instance_7_NSObject
la $t0,static_instance_7_NSObject

 ##F:code.txt #L:56
 #asm node :li $t1,8
li $t1,8

 ##F:code.txt #L:56
 #asm node :sw $t0,-12($gp)
sw $t0,-12($gp)

 ##F:code.txt #L:56
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:code.txt #L:56
 #asm node :la $t0,static_instance_9_System
la $t0,static_instance_9_System

 ##F:code.txt #L:56
 #asm node :li $t1,10
li $t1,10

 ##F:code.txt #L:56
 #asm node :sw $t0,-16($gp)
sw $t0,-16($gp)

 ##F:code.txt #L:56
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:code.txt #L:56
 #identifier A
lw $t0,0($gp)
addi $v0,$gp,0
sub $sp,$sp,4
sw $t0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:56
 #asm node :sub $sp,$sp,4
sub $sp,$sp,4
 ##F:code.txt #L:56
 #asm node :jal _c2_A_m16_main
jal _c2_A_m16_main
 ##F:code.txt #L:56
 #asm node :li $v0,10
li $v0,10
 ##F:code.txt #L:56
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,20




 #Global vtable: 


global_vtable:
 #A
li $t0,1
beq $t0,$a0,vt_1
 #A static
li $t0,2
beq $t0,$a0,vt_2
 #B
li $t0,3
beq $t0,$a0,vt_3
 #B static
li $t0,4
beq $t0,$a0,vt_4
 #C
li $t0,5
beq $t0,$a0,vt_5
 #C static
li $t0,6
beq $t0,$a0,vt_6
 #NSObject
li $t0,7
beq $t0,$a0,vt_7
 #NSObject static
li $t0,8
beq $t0,$a0,vt_8
 #System
li $t0,9
beq $t0,$a0,vt_9
 #System static
li $t0,10
beq $t0,$a0,vt_10
j type_not_found
 ##########################################
 #Generating code for class A




 #vtable: 


vt_1:
 #gogo
li $t0,14
beq $t0,$a1,_c1_A_m14_go
 #printprint
li $t0,15
beq $t0,$a1,_c1_A_m15_print
 #super
 #NSObject
 #super
j method_not_found


 #generating code for Method:go

_c1_A_m14_go:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:22
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:23
 #Assign node
 #RHS:
li $t9,1
sub $sp,$sp,4
sw $t9, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:print

_c1_A_m15_print:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:25
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:26
 #Dynamically CALLING A METHOD 10
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,10
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class A




 #vtable: 


vt_2:
 #allocalloc
li $t0,17
beq $t0,$a1,_c2_A_m17_alloc
 #mainmain
li $t0,16
beq $t0,$a1,_c2_A_m16_main
 #super
j method_not_found


 #generating code for Method:alloc

_c2_A_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:56
 #asm node :li $v0,9
li $v0,9
 ##F:code.txt #L:56
 #asm node :li $a0,8
li $a0,8
 ##F:code.txt #L:56
 #asm node :syscall
syscall
 ##F:code.txt #L:56
 #asm node :li $t0,1
li $t0,1
 ##F:code.txt #L:56
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:main

_c2_A_m16_main:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:13
 #reserving space in stack for scope variables
sub $sp,$sp,12
 ##F:code.txt #L:14
 ##F:code.txt #L:15
 #Assign node
 #RHS:
 #Dynamically CALLING A METHOD 17
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier A
lw $t0,0($gp)
addi $v0,$gp,0
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,17
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-8($fp)
addi $v0,$fp,-8
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:16
 #Assign node
 #RHS:
 #Dynamically CALLING A METHOD 17
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier B
lw $t0,-4($gp)
addi $v0,$gp,-4
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,17
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
 #Assign node lHS:
 #identifier b
lw $t0,-12($fp)
addi $v0,$fp,-12
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:17
 #Assign node
 #RHS:
 #Dynamically CALLING A METHOD 17
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier C
lw $t0,-8($gp)
addi $v0,$gp,-8
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,17
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
 #Assign node lHS:
 #identifier c
lw $t0,-16($fp)
addi $v0,$fp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:18
 #Dynamically CALLING A METHOD 14
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier a
lw $t0,-8($fp)
addi $v0,$fp,-8
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,14
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:18
 #Dynamically CALLING A METHOD 14
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier b
lw $t0,-12($fp)
addi $v0,$fp,-12
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,14
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:18
 #Dynamically CALLING A METHOD 14
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier c
lw $t0,-16($fp)
addi $v0,$fp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,14
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:19
 #Dynamically CALLING A METHOD 15
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier a
lw $t0,-8($fp)
addi $v0,$fp,-8
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,15
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:19
 #Dynamically CALLING A METHOD 15
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier b
lw $t0,-12($fp)
addi $v0,$fp,-12
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,15
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:19
 #Dynamically CALLING A METHOD 15
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier c
lw $t0,-16($fp)
addi $v0,$fp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,15
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,12
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class B




 #vtable: 


vt_3:
 #gogo
li $t0,14
beq $t0,$a1,_c3_B_m14_go
 #super
 #A
 #gogo
li $t0,14
beq $t0,$a1,_c1_A_m14_go
 #printprint
li $t0,15
beq $t0,$a1,_c1_A_m15_print
 #super
 #NSObject
 #super
j method_not_found


 #generating code for Method:go

_c3_B_m14_go:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:38
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:39
 #Assign node
 #RHS:
li $t9,2
sub $sp,$sp,4
sw $t9, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class B




 #vtable: 


vt_4:
 #allocalloc
li $t0,17
beq $t0,$a1,_c4_B_m17_alloc
 #super
j method_not_found


 #generating code for Method:alloc

_c4_B_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:56
 #asm node :li $v0,9
li $v0,9
 ##F:code.txt #L:56
 #asm node :li $a0,8
li $a0,8
 ##F:code.txt #L:56
 #asm node :syscall
syscall
 ##F:code.txt #L:56
 #asm node :li $t0,3
li $t0,3
 ##F:code.txt #L:56
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class C




 #vtable: 


vt_5:
 #gogo
li $t0,14
beq $t0,$a1,_c5_C_m14_go
 #super
 #A
 #gogo
li $t0,14
beq $t0,$a1,_c1_A_m14_go
 #printprint
li $t0,15
beq $t0,$a1,_c1_A_m15_print
 #super
 #NSObject
 #super
j method_not_found


 #generating code for Method:go

_c5_C_m14_go:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:52
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:53
 #Assign node
 #RHS:
li $t9,3
sub $sp,$sp,4
sw $t9, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class C




 #vtable: 


vt_6:
 #allocalloc
li $t0,17
beq $t0,$a1,_c6_C_m17_alloc
 #super
j method_not_found


 #generating code for Method:alloc

_c6_C_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:56
 #asm node :li $v0,9
li $v0,9
 ##F:code.txt #L:56
 #asm node :li $a0,8
li $a0,8
 ##F:code.txt #L:56
 #asm node :syscall
syscall
 ##F:code.txt #L:56
 #asm node :li $t0,5
li $t0,5
 ##F:code.txt #L:56
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class NSObject




 #vtable: 


vt_7:
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class NSObject




 #vtable: 


vt_8:
 #allocalloc
li $t0,17
beq $t0,$a1,_c8_NSObject_m17_alloc
 #super
j method_not_found


 #generating code for Method:alloc

_c8_NSObject_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:56
 #asm node :li $v0,9
li $v0,9
 ##F:code.txt #L:56
 #asm node :li $a0,4
li $a0,4
 ##F:code.txt #L:56
 #asm node :syscall
syscall
 ##F:code.txt #L:56
 #asm node :li $t0,7
li $t0,7
 ##F:code.txt #L:56
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class System




 #vtable: 


vt_9:
 #super
 #NSObject
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class System




 #vtable: 


vt_10:
 #print: (int) parameter 
li $t0,6
beq $t0,$a1,_c10_System_m6_print__int_parameter_
 #print: (float) parameter 
li $t0,7
beq $t0,$a1,_c10_System_m7_print__float_parameter_
 #print: (NSString) parameter 
li $t0,8
beq $t0,$a1,_c10_System_m8_print__NSString_parameter_
 #print: (char) parameter 
li $t0,9
beq $t0,$a1,_c10_System_m9_print__char_parameter_
 #println: (int) parameter 
li $t0,10
beq $t0,$a1,_c10_System_m10_println__int_parameter_
 #println: (float) parameter 
li $t0,11
beq $t0,$a1,_c10_System_m11_println__float_parameter_
 #println: (NSString) parameter 
li $t0,12
beq $t0,$a1,_c10_System_m12_println__NSString_parameter_
 #println: (char) parameter 
li $t0,13
beq $t0,$a1,_c10_System_m13_println__char_parameter_
 #allocalloc
li $t0,17
beq $t0,$a1,_c10_System_m17_alloc
 #printlnprintln
li $t0,5
beq $t0,$a1,_c10_System_m5_println
 #readcharreadchar
li $t0,2
beq $t0,$a1,_c10_System_m2_readchar
 #readfloatreadfloat
li $t0,3
beq $t0,$a1,_c10_System_m3_readfloat
 #readintreadint
li $t0,1
beq $t0,$a1,_c10_System_m1_readint
 #readstringreadstring
li $t0,4
beq $t0,$a1,_c10_System_m4_readstring
 #super
j method_not_found


 #generating code for Method:print: (int) parameter 

_c10_System_m6_print__int_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:33
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:34
 #asm node :li $v0 ,1
li $v0 ,1
 ##F:system.oc #L:35
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:36
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:print: (float) parameter 

_c10_System_m7_print__float_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:39
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:40
 #asm node :li $v0, 2
li $v0, 2
 ##F:system.oc #L:41
 #asm node :l.s  $f12,-8($fp)
l.s  $f12,-8($fp)
 ##F:system.oc #L:42
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:print: (NSString) parameter 

_c10_System_m8_print__NSString_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:45
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:46
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:47
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:48
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:print: (char) parameter 

_c10_System_m9_print__char_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:51
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:52
 #asm node :li $v0, 12
li $v0, 12
 ##F:system.oc #L:53
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:54
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (int) parameter 

_c10_System_m10_println__int_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:64
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:65
 #asm node :li $v0 ,1
li $v0 ,1
 ##F:system.oc #L:66
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:67
 #asm node :syscall
syscall
 ##F:system.oc #L:68
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:69
 #asm node :la $a0 ,newline
la $a0 ,newline
 ##F:system.oc #L:70
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (float) parameter 

_c10_System_m11_println__float_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:74
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:75
 #asm node :li $v0, 2
li $v0, 2
 ##F:system.oc #L:76
 #asm node :l.s  $f12,-8($fp)
l.s  $f12,-8($fp)
 ##F:system.oc #L:77
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (NSString) parameter 

_c10_System_m12_println__NSString_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:80
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:81
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:82
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:83
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (char) parameter 

_c10_System_m13_println__char_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:86
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:87
 #asm node :li $v0, 12
li $v0, 12
 ##F:system.oc #L:88
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:89
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:alloc

_c10_System_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:56
 #asm node :li $v0,9
li $v0,9
 ##F:code.txt #L:56
 #asm node :li $a0,4
li $a0,4
 ##F:code.txt #L:56
 #asm node :syscall
syscall
 ##F:code.txt #L:56
 #asm node :li $t0,9
li $t0,9
 ##F:code.txt #L:56
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:println

_c10_System_m5_println:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:57
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:58
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:59
 #asm node :la $a0 ,newline
la $a0 ,newline
 ##F:system.oc #L:60
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readchar

_c10_System_m2_readchar:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:111
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:113
 #asm node :li $v0,12
li $v0,12
 ##F:system.oc #L:114
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readfloat

_c10_System_m3_readfloat:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:98
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:100
 #asm node :li $v0, 6
li $v0, 6
 ##F:system.oc #L:101
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readint

_c10_System_m1_readint:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:92
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:94
 #asm node :li $v0, 5
li $v0, 5
 ##F:system.oc #L:95
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readstring

_c10_System_m4_readstring:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:104
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:106
 #asm node :li $v0,8
li $v0,8
 ##F:system.oc #L:107
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class error_type




 #vtable: 


vt_11:
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class error_type




 #vtable: 


vt_12:
 #super
j method_not_found
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class id




 #vtable: 


vt_13:
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class id




 #vtable: 


vt_14:
 #super
j method_not_found
 ##########################################



 ####End STATIC



#common assemblies

method_not_found:
li $v0 ,1

li $a0 ,-1
syscall

li $v0,10
syscall

type_not_found:
li $v0 ,1

li $a0 ,-2
syscall

li $v0,10
syscall
