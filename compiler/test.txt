.data
static_instance_1_A:    .byte   0:4
static_instance_3_B:    .byte   0:4
static_instance_5_C:    .byte   0:4
static_instance_7_NSObject:    .byte   0:4
static_instance_9_System:    .byte   0:4
static_instance_11_Wesso:    .byte   0:4
string_1: .asciiz "hiiii"
string_2: .asciiz "is less"
string_3: .asciiz "is less equal"
string_4: .asciiz "is more"
string_5: .asciiz "is more eq"
string_6: .asciiz "this is class B"
string_7: .asciiz "this is class C"

newline: .asciiz "\n"

.text
.globl main
main:
 #reserving space in stack for scope variables
sub $sp,$sp,24
 ##F:wessam.txt #L:15
 #asm node :la $t0,static_instance_1_A
la $t0,static_instance_1_A

 ##F:wessam.txt #L:15
 #asm node :li $t1,2
li $t1,2

 ##F:wessam.txt #L:15
 #asm node :sw $t0,0($gp)
sw $t0,0($gp)

 ##F:wessam.txt #L:15
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:wessam.txt #L:15
 #asm node :la $t0,static_instance_3_B
la $t0,static_instance_3_B

 ##F:wessam.txt #L:15
 #asm node :li $t1,4
li $t1,4

 ##F:wessam.txt #L:15
 #asm node :sw $t0,-4($gp)
sw $t0,-4($gp)

 ##F:wessam.txt #L:15
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:wessam.txt #L:15
 #asm node :la $t0,static_instance_5_C
la $t0,static_instance_5_C

 ##F:wessam.txt #L:15
 #asm node :li $t1,6
li $t1,6

 ##F:wessam.txt #L:15
 #asm node :sw $t0,-8($gp)
sw $t0,-8($gp)

 ##F:wessam.txt #L:15
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:wessam.txt #L:15
 #asm node :la $t0,static_instance_7_NSObject
la $t0,static_instance_7_NSObject

 ##F:wessam.txt #L:15
 #asm node :li $t1,8
li $t1,8

 ##F:wessam.txt #L:15
 #asm node :sw $t0,-12($gp)
sw $t0,-12($gp)

 ##F:wessam.txt #L:15
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:wessam.txt #L:15
 #asm node :la $t0,static_instance_9_System
la $t0,static_instance_9_System

 ##F:wessam.txt #L:15
 #asm node :li $t1,10
li $t1,10

 ##F:wessam.txt #L:15
 #asm node :sw $t0,-16($gp)
sw $t0,-16($gp)

 ##F:wessam.txt #L:15
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:wessam.txt #L:15
 #asm node :la $t0,static_instance_11_Wesso
la $t0,static_instance_11_Wesso

 ##F:wessam.txt #L:15
 #asm node :li $t1,12
li $t1,12

 ##F:wessam.txt #L:15
 #asm node :sw $t0,-20($gp)
sw $t0,-20($gp)

 ##F:wessam.txt #L:15
 #asm node :sw $t1,0($t0)
sw $t1,0($t0)

 ##F:wessam.txt #L:15
 #identifier A
lw $t0,0($gp)
addi $v0,$gp,0
sub $sp,$sp,4
sw $t0, 0($sp)
add $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :sub $sp,$sp,4
sub $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :jal _c2_A_m16_main
jal _c2_A_m16_main
 ##F:wessam.txt #L:15
 #asm node :li $v0,10
li $v0,10
 ##F:wessam.txt #L:15
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,24




 #Global vtable: 


global_vtable:
 #A
li $t0,1
beq $t0,$a0,vt_1
 #A static
li $t0,2
beq $t0,$a0,vt_2
 #B
li $t0,3
beq $t0,$a0,vt_3
 #B static
li $t0,4
beq $t0,$a0,vt_4
 #C
li $t0,5
beq $t0,$a0,vt_5
 #C static
li $t0,6
beq $t0,$a0,vt_6
 #NSObject
li $t0,7
beq $t0,$a0,vt_7
 #NSObject static
li $t0,8
beq $t0,$a0,vt_8
 #System
li $t0,9
beq $t0,$a0,vt_9
 #System static
li $t0,10
beq $t0,$a0,vt_10
 #Wesso
li $t0,11
beq $t0,$a0,vt_11
 #Wesso static
li $t0,12
beq $t0,$a0,vt_12
j type_not_found
 ##########################################
 #Generating code for class A




 #vtable: 


vt_1:
 #gogo
li $t0,14
beq $t0,$a1,_c1_A_m14_go
 #printprint
li $t0,15
beq $t0,$a1,_c1_A_m15_print
 #super
 #NSObject
 #super
j method_not_found


 #generating code for Method:go

_c1_A_m14_go:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:35
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:36
 #Assign node
 #RHS:
li $t9,1
sub $sp,$sp,4
sw $t9, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:print

_c1_A_m15_print:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:38
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:39
 #Dynamically CALLING A METHOD 10
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,10
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class A




 #vtable: 


vt_2:
 #allocalloc
li $t0,17
beq $t0,$a1,_c2_A_m17_alloc
 #mainmain
li $t0,16
beq $t0,$a1,_c2_A_m16_main
 #super
j method_not_found


 #generating code for Method:alloc

_c2_A_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :li $v0,9
li $v0,9
 ##F:wessam.txt #L:15
 #asm node :li $a0,8
li $a0,8
 ##F:wessam.txt #L:15
 #asm node :syscall
syscall
 ##F:wessam.txt #L:15
 #asm node :li $t0,1
li $t0,1
 ##F:wessam.txt #L:15
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:main

_c2_A_m16_main:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:14
 #reserving space in stack for scope variables
sub $sp,$sp,16
 ##F:code.txt #L:15
 ##F:code.txt #L:16
 #Assign node
 #RHS:
la $t9,string_1
sub $sp,$sp,4
sw $t9, 0($sp)
 #Assign node lHS:
 #identifier s
lw $t0,-8($fp)
addi $v0,$fp,-8
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:17
 #Dynamically CALLING A METHOD 11
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
li $t9,1080033280
sub $sp,$sp,4
sw $t9, 0($sp)
li $t9,1083179008
sub $sp,$sp,4
sw $t9, 0($sp)
l.s $f1, 0($sp)
add $sp,$sp,4
l.s $f0, 0($sp)
add $sp,$sp,4
add.s $f0,$f0,$f1
sub $sp,$sp,4
s.s $f0, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,11
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:20
 #ifNode
li $t9,1088002458
sub $sp,$sp,4
sw $t9, 0($sp)
li $t9,1083179008
sub $sp,$sp,4
sw $t9, 0($sp)
l.s $f1, 0($sp)
add $sp,$sp,4
l.s $f0, 0($sp)
add $sp,$sp,4
 #LESS_THAN opf
li $t0,0
c.lt.s $f0,$f1 
bc1f eqop_temp2
li $t0,1
eqop_temp2:
sub $sp,$sp,4
sw $t0, 0($sp)
lw $t0, 0($sp)
add $sp,$sp,4
beq $t0,$0,else_0
 #Dynamically CALLING A METHOD 12
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
la $t9,string_2
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,12
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
j endif_0
else_0:
endif_0:
 ##F:code.txt #L:22
 #ifNode
li $t9,1088002458
sub $sp,$sp,4
sw $t9, 0($sp)
li $t9,1083179008
sub $sp,$sp,4
sw $t9, 0($sp)
l.s $f1, 0($sp)
add $sp,$sp,4
l.s $f0, 0($sp)
add $sp,$sp,4
 #LESS_THAN opf
li $t0,0
c.le.s $f0,$f1 
bc1f eqop_temp3
li $t0,1
eqop_temp3:
sub $sp,$sp,4
sw $t0, 0($sp)
lw $t0, 0($sp)
add $sp,$sp,4
beq $t0,$0,else_1
 #Dynamically CALLING A METHOD 12
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
la $t9,string_3
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,12
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
j endif_1
else_1:
endif_1:
 ##F:code.txt #L:24
 #ifNode
li $t9,1088002458
sub $sp,$sp,4
sw $t9, 0($sp)
li $t9,1083179008
sub $sp,$sp,4
sw $t9, 0($sp)
l.s $f1, 0($sp)
add $sp,$sp,4
l.s $f0, 0($sp)
add $sp,$sp,4
 #LESS_THAN opf
li $t0,1
c.lt.s $f0,$f1 
bc1f eqop_temp4
li $t0,0
eqop_temp4:
sub $sp,$sp,4
sw $t0, 0($sp)
lw $t0, 0($sp)
add $sp,$sp,4
beq $t0,$0,else_2
 #Dynamically CALLING A METHOD 12
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
la $t9,string_4
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,12
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
j endif_2
else_2:
endif_2:
 ##F:code.txt #L:27
 #ifNode
li $t9,1088002458
sub $sp,$sp,4
sw $t9, 0($sp)
li $t9,1083179008
sub $sp,$sp,4
sw $t9, 0($sp)
l.s $f1, 0($sp)
add $sp,$sp,4
l.s $f0, 0($sp)
add $sp,$sp,4
 #LESS_THAN opf
li $t0,1
c.le.s $f0,$f1 
bc1f eqop_temp5
li $t0,0
eqop_temp5:
sub $sp,$sp,4
sw $t0, 0($sp)
lw $t0, 0($sp)
add $sp,$sp,4
beq $t0,$0,else_3
 #Dynamically CALLING A METHOD 12
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
la $t9,string_5
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,12
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
j endif_3
else_3:
endif_3:
 ##F:code.txt #L:27
 ##F:code.txt #L:28
 #Assign node
 #RHS:
 #Dynamically CALLING A METHOD 17
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier A
lw $t0,0($gp)
addi $v0,$gp,0
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,17
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-12($fp)
addi $v0,$fp,-12
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:29
 #Assign node
 #RHS:
 #Dynamically CALLING A METHOD 17
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier B
lw $t0,-4($gp)
addi $v0,$gp,-4
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,17
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
 #Assign node lHS:
 #identifier b
lw $t0,-16($fp)
addi $v0,$fp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:30
 #Assign node
 #RHS:
 #Dynamically CALLING A METHOD 17
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier C
lw $t0,-8($gp)
addi $v0,$gp,-8
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,17
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
 #Assign node lHS:
 #identifier c
lw $t0,-20($fp)
addi $v0,$fp,-20
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:31
 #Dynamically CALLING A METHOD 14
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier a
lw $t0,-12($fp)
addi $v0,$fp,-12
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,14
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:31
 #Dynamically CALLING A METHOD 14
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier b
lw $t0,-16($fp)
addi $v0,$fp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,14
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:31
 #Dynamically CALLING A METHOD 14
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier c
lw $t0,-20($fp)
addi $v0,$fp,-20
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,14
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:32
 #Dynamically CALLING A METHOD 15
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier a
lw $t0,-12($fp)
addi $v0,$fp,-12
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,15
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:32
 #Dynamically CALLING A METHOD 15
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier b
lw $t0,-16($fp)
addi $v0,$fp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,15
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:32
 #Dynamically CALLING A METHOD 15
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier c
lw $t0,-20($fp)
addi $v0,$fp,-20
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
lw $t0,0($sp)
lw $a0,0($t0)
li $a1,15
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,16
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class B




 #vtable: 


vt_3:
 #gogo
li $t0,14
beq $t0,$a1,_c3_B_m14_go
 #super
 #A
 #gogo
li $t0,14
beq $t0,$a1,_c1_A_m14_go
 #printprint
li $t0,15
beq $t0,$a1,_c1_A_m15_print
 #super
 #NSObject
 #super
j method_not_found


 #generating code for Method:go

_c3_B_m14_go:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:51
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:52
 #Assign node
 #RHS:
li $t9,2
sub $sp,$sp,4
sw $t9, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 ##F:code.txt #L:53
 #Dynamically CALLING A METHOD 12
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
la $t9,string_6
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,12
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class B




 #vtable: 


vt_4:
 #allocalloc
li $t0,17
beq $t0,$a1,_c4_B_m17_alloc
 #super
j method_not_found


 #generating code for Method:alloc

_c4_B_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :li $v0,9
li $v0,9
 ##F:wessam.txt #L:15
 #asm node :li $a0,8
li $a0,8
 ##F:wessam.txt #L:15
 #asm node :syscall
syscall
 ##F:wessam.txt #L:15
 #asm node :li $t0,3
li $t0,3
 ##F:wessam.txt #L:15
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class C




 #vtable: 


vt_5:
 #gogo
li $t0,14
beq $t0,$a1,_c5_C_m14_go
 #super
 #A
 #gogo
li $t0,14
beq $t0,$a1,_c1_A_m14_go
 #printprint
li $t0,15
beq $t0,$a1,_c1_A_m15_print
 #super
 #NSObject
 #super
j method_not_found


 #generating code for Method:go

_c5_C_m14_go:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:code.txt #L:66
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:code.txt #L:68
 #Dynamically CALLING A METHOD 12
 #preserving registers
sub $sp,$sp,4
sw $ra, 0($sp)
sub $sp,$sp,4
sw $fp, 0($sp)
 #generating code for the sender
 #identifier System
lw $t0,-16($gp)
addi $v0,$gp,-16
sub $sp,$sp,4
sw $t0, 0($sp)
 #generating code for Args
 #generating code for selector:println
 #generating  for var #0
la $t9,string_7
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t0,4($sp)
lw $a0,0($t0)
li $a1,12
jal global_vtable
lw $fp, 0($sp)
add $sp,$sp,4
lw $ra, 0($sp)
add $sp,$sp,4
sub $sp,$sp,4
sw $v0, 0($sp)
add $sp,$sp,4
 ##F:code.txt #L:69
 #Assign node
 #RHS:
li $t9,3
sub $sp,$sp,4
sw $t9, 0($sp)
 #Assign node lHS:
 #identifier a
lw $t0,-4($fp)
addi $v0,$t0,4
lw $t0,4($t0)
sub $sp,$sp,4
sw $t0, 0($sp)
 #Assign node poping old val:
lw $t0, 0($sp)
add $sp,$sp,4
 #Assign node getting RHS val:
lw $t0, 0($sp)
 #Assign node storing in position val:
sw $t0,0($v0)
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class C




 #vtable: 


vt_6:
 #allocalloc
li $t0,17
beq $t0,$a1,_c6_C_m17_alloc
 #super
j method_not_found


 #generating code for Method:alloc

_c6_C_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :li $v0,9
li $v0,9
 ##F:wessam.txt #L:15
 #asm node :li $a0,8
li $a0,8
 ##F:wessam.txt #L:15
 #asm node :syscall
syscall
 ##F:wessam.txt #L:15
 #asm node :li $t0,5
li $t0,5
 ##F:wessam.txt #L:15
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class NSObject




 #vtable: 


vt_7:
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class NSObject




 #vtable: 


vt_8:
 #allocalloc
li $t0,17
beq $t0,$a1,_c8_NSObject_m17_alloc
 #super
j method_not_found


 #generating code for Method:alloc

_c8_NSObject_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :li $v0,9
li $v0,9
 ##F:wessam.txt #L:15
 #asm node :li $a0,4
li $a0,4
 ##F:wessam.txt #L:15
 #asm node :syscall
syscall
 ##F:wessam.txt #L:15
 #asm node :li $t0,7
li $t0,7
 ##F:wessam.txt #L:15
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class System




 #vtable: 


vt_9:
 #super
 #NSObject
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class System




 #vtable: 


vt_10:
 #print: (int) parameter 
li $t0,6
beq $t0,$a1,_c10_System_m6_print__int_parameter_
 #print: (float) parameter 
li $t0,7
beq $t0,$a1,_c10_System_m7_print__float_parameter_
 #print: (NSString) parameter 
li $t0,8
beq $t0,$a1,_c10_System_m8_print__NSString_parameter_
 #print: (char) parameter 
li $t0,9
beq $t0,$a1,_c10_System_m9_print__char_parameter_
 #println: (int) parameter 
li $t0,10
beq $t0,$a1,_c10_System_m10_println__int_parameter_
 #println: (float) parameter 
li $t0,11
beq $t0,$a1,_c10_System_m11_println__float_parameter_
 #println: (NSString) parameter 
li $t0,12
beq $t0,$a1,_c10_System_m12_println__NSString_parameter_
 #println: (char) parameter 
li $t0,13
beq $t0,$a1,_c10_System_m13_println__char_parameter_
 #allocalloc
li $t0,17
beq $t0,$a1,_c10_System_m17_alloc
 #printlnprintln
li $t0,5
beq $t0,$a1,_c10_System_m5_println
 #readcharreadchar
li $t0,2
beq $t0,$a1,_c10_System_m2_readchar
 #readfloatreadfloat
li $t0,3
beq $t0,$a1,_c10_System_m3_readfloat
 #readintreadint
li $t0,1
beq $t0,$a1,_c10_System_m1_readint
 #readstringreadstring
li $t0,4
beq $t0,$a1,_c10_System_m4_readstring
 #super
j method_not_found


 #generating code for Method:print: (int) parameter 

_c10_System_m6_print__int_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:33
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:34
 #asm node :li $v0 ,1
li $v0 ,1
 ##F:system.oc #L:35
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:36
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:print: (float) parameter 

_c10_System_m7_print__float_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:39
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:40
 #asm node :li $v0, 2
li $v0, 2
 ##F:system.oc #L:41
 #asm node :l.s  $f12,-8($fp)
l.s  $f12,-8($fp)
 ##F:system.oc #L:42
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:print: (NSString) parameter 

_c10_System_m8_print__NSString_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:45
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:46
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:47
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:48
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:print: (char) parameter 

_c10_System_m9_print__char_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:51
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:52
 #asm node :li $v0, 12
li $v0, 12
 ##F:system.oc #L:53
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:54
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (int) parameter 

_c10_System_m10_println__int_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:64
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:65
 #asm node :li $v0 ,1
li $v0 ,1
 ##F:system.oc #L:66
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:67
 #asm node :syscall
syscall
 ##F:system.oc #L:68
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:69
 #asm node :la $a0 ,newline
la $a0 ,newline
 ##F:system.oc #L:70
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (float) parameter 

_c10_System_m11_println__float_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:74
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:75
 #asm node :li $v0, 2
li $v0, 2
 ##F:system.oc #L:76
 #asm node :l.s  $f12,-8($fp)
l.s  $f12,-8($fp)
 ##F:system.oc #L:77
 #asm node :syscall
syscall
 ##F:system.oc #L:78
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:79
 #asm node :la $a0 ,newline
la $a0 ,newline
 ##F:system.oc #L:80
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (NSString) parameter 

_c10_System_m12_println__NSString_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:83
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:84
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:85
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:86
 #asm node :syscall
syscall
 ##F:system.oc #L:87
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:88
 #asm node :la $a0 ,newline
la $a0 ,newline
 ##F:system.oc #L:89
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:println: (char) parameter 

_c10_System_m13_println__char_parameter_:
 #moving the stack back because args are in scoop
add $sp,$sp,8
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,8
 ##F:system.oc #L:92
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:93
 #asm node :li $v0, 12
li $v0, 12
 ##F:system.oc #L:94
 #asm node :lw $a0 ,-8($fp)
lw $a0 ,-8($fp)
 ##F:system.oc #L:95
 #asm node :syscall
syscall
 ##F:system.oc #L:96
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:97
 #asm node :la $a0 ,newline
la $a0 ,newline
 ##F:system.oc #L:98
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,8
jr $ra


 #generating code for Method:alloc

_c10_System_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :li $v0,9
li $v0,9
 ##F:wessam.txt #L:15
 #asm node :li $a0,4
li $a0,4
 ##F:wessam.txt #L:15
 #asm node :syscall
syscall
 ##F:wessam.txt #L:15
 #asm node :li $t0,9
li $t0,9
 ##F:wessam.txt #L:15
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:println

_c10_System_m5_println:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:57
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:58
 #asm node :li $v0 ,4
li $v0 ,4
 ##F:system.oc #L:59
 #asm node :la $a0 ,newline
la $a0 ,newline
 ##F:system.oc #L:60
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readchar

_c10_System_m2_readchar:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:120
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:122
 #asm node :li $v0,12
li $v0,12
 ##F:system.oc #L:123
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readfloat

_c10_System_m3_readfloat:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:107
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:109
 #asm node :li $v0, 6
li $v0, 6
 ##F:system.oc #L:110
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readint

_c10_System_m1_readint:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:101
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:103
 #asm node :li $v0, 5
li $v0, 5
 ##F:system.oc #L:104
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra


 #generating code for Method:readstring

_c10_System_m4_readstring:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:system.oc #L:113
 #reserving space in stack for scope variables
sub $sp,$sp,0
 ##F:system.oc #L:115
 #asm node :li $v0,8
li $v0,8
 ##F:system.oc #L:116
 #asm node :syscall
syscall
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class Wesso




 #vtable: 


vt_11:
 #super
 #NSObject
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class Wesso




 #vtable: 


vt_12:
 #allocalloc
li $t0,17
beq $t0,$a1,_c12_Wesso_m17_alloc
 #super
j method_not_found


 #generating code for Method:alloc

_c12_Wesso_m17_alloc:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 ##F:wessam.txt #L:15
 #asm node :li $v0,9
li $v0,9
 ##F:wessam.txt #L:15
 #asm node :li $a0,8
li $a0,8
 ##F:wessam.txt #L:15
 #asm node :syscall
syscall
 ##F:wessam.txt #L:15
 #asm node :li $t0,11
li $t0,11
 ##F:wessam.txt #L:15
 #asm node :sw $t0,0($v0)
sw $t0,0($v0)
 #releasing space in stack for scope variables
add $sp,$sp,4
jr $ra
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class error_type




 #vtable: 


vt_13:
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class error_type




 #vtable: 


vt_14:
 #super
j method_not_found
 ##########################################



 ####End STATIC



 ##########################################
 #Generating code for class id




 #vtable: 


vt_15:
 #super
j method_not_found
 ##########################################
 ####STATIC
 ##########################################
 #Generating code for class id




 #vtable: 


vt_16:
 #super
j method_not_found
 ##########################################



 ####End STATIC



#common assemblies

method_not_found:
li $v0 ,1

li $a0 ,-1
syscall

li $v0,10
syscall

type_not_found:
li $v0 ,1

li $a0 ,-2
syscall

li $v0,10
syscall
