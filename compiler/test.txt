.globl main
main:
 ##########################################
 #Generating code for class NSObject




 ##########################################



 ##########################################
 #Generating code for class System






 #generating code for Method:print: (int) parameter 

__method_1:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #releasing space in stack for scope variables
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,4


 #generating code for Method:print: (float) parameter 

__method_2:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #releasing space in stack for scope variables
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,4


 #generating code for Method:print: (NSString) parameter 

__method_3:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #releasing space in stack for scope variables
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,4


 #generating code for Method:print: (char) parameter 

__method_4:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #asm node :parameter
parameter
 #releasing space in stack for scope variables
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,4


 #generating code for Method:readcharreadchar

__method_5:
 #moving the stack back because args are in scoop
add $sp,$sp,0
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #asm node :readchar
readchar
 #asm node :readchar
readchar
 #asm node :readchar
readchar
 #asm node :readchar
readchar
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,0


 #generating code for Method:readfloatreadfloat

__method_6:
 #moving the stack back because args are in scoop
add $sp,$sp,0
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #asm node :readfloat
readfloat
 #asm node :readfloat
readfloat
 #asm node :readfloat
readfloat
 #asm node :readfloat
readfloat
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,0


 #generating code for Method:readintreadint

__method_7:
 #moving the stack back because args are in scoop
add $sp,$sp,0
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #asm node :readint
readint
 #asm node :readint
readint
 #asm node :readint
readint
 #asm node :readint
readint
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,0


 #generating code for Method:readstringreadstring

__method_8:
 #moving the stack back because args are in scoop
add $sp,$sp,0
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #reserving space in stack for scope variables
sub $sp,$sp,0
 #asm node :readstring
readstring
 #asm node :readstring
readstring
 #asm node :readstring
readstring
 #asm node :readstring
readstring
 #releasing space in stack for scope variables
add $sp,$sp,0
 #releasing space in stack for scope variables
add $sp,$sp,0
 ##########################################



 ##########################################
 #Generating code for class wessam






 #generating code for Method:go: (int) y 

__method_9:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #reserving space in stack for scope variables
sub $sp,$sp,4
li $t9,8
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t1, 0($sp)
add $sp,$sp,4
 #identifier y
lw $t9,0($fp)
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t0, 0($sp)
add $sp,$sp,4
add $t0,$0,$t1
sw $t0,0($fp)
 #releasing space in stack for scope variables
add $sp,$sp,4
 #releasing space in stack for scope variables
add $sp,$sp,4


 #generating code for Method:a2go: (int) y 

__method_10:
 #moving the stack back because args are in scoop
add $sp,$sp,4
 #movesp to fp
move $fp,$sp
 #reserving space in stack for scope variables
sub $sp,$sp,4
 #reserving space in stack for scope variables
sub $sp,$sp,8
 #identifier a
lw $t9,4($fp)
sub $sp,$sp,4
sw $t9, 0($sp)
 #CALLING A METHOD go: (int) y 
 #generating code for the sender
 #identifier a
lw $t9,4($fp)
sub $sp,$sp,4
sw $t9, 0($sp)
 #generating code for Args
 #generating code for selector:go
 #generating  for var #0
li $t9,5
sub $sp,$sp,4
sw $t9, 0($sp)
jal __method_9
li $t9,2
sub $sp,$sp,4
sw $t9, 0($sp)
lw $t1, 0($sp)
add $sp,$sp,4
 #identifier a
lw $t9,4($fp)
sub $sp,$sp,4
sw $t9, 0($sp)
 #getting a datamember b of type int
 #generating code for the sender
 #identifier a
lw $t9,4($fp)
sub $sp,$sp,4
sw $t9, 0($sp)
lw $a0, 0($sp)
add $sp,$sp,4
lw $t0,-1($a0)
sub $sp,$sp,4
sw $t0, 0($sp)
lw $t0, 0($sp)
add $sp,$sp,4
add $t0,$0,$t1
 #releasing space in stack for scope variables
add $sp,$sp,8
 #releasing space in stack for scope variables
add $sp,$sp,4
 ##########################################



