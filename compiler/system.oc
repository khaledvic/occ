


@interface System
{
}
+(int) readint;
+(char) readchar;
+(float) readfloat;
+(NSString) readstring;

+(void) println;

+(void) print:(int)parameter;
+(void) print:(float)parameter;

+(void) print:(NSString)parameter;
+(void) print:(char)parameter;

+(void) println:(int)parameter;
+(void) println:(float)parameter;

+(void) println:(NSString)parameter;
+(void) println:(char)parameter;





@end
@implementation System
+(void) print:(int)parameter
{
	@asm "li $v0 ,1";
	@asm "lw $a0 ,-8($fp)";
	@asm "syscall";
}
+(void) print:(float)parameter
{
	@asm "li $v0, 2";
    @asm "l.s  $f12,-8($fp)";
	@asm "syscall";
}
+(void) print:(NSString)parameter
{
	@asm "li $v0 ,4";
 	@asm "lw $a0 ,-8($fp)";
	@asm "syscall";
}
+(void) print:(char)parameter
{
	@asm "li $v0, 12";
	@asm "lw $a0 ,-8($fp)";
	@asm "syscall";
}
+(void) println
{
	@asm "li $v0 ,4";
	@asm "la $a0 ,newline";
	@asm "syscall";

}
+(void) println:(int)parameter
{
	@asm "li $v0 ,1";
	@asm "lw $a0 ,-8($fp)";
	@asm "syscall";
	@asm "li $v0 ,4";
	@asm "la $a0 ,newline";
	@asm "syscall";

}
+(void) println:(float)parameter
{
	@asm "li $v0, 2";
    @asm "l.s  $f12,-8($fp)";
	@asm "syscall";
	@asm "li $v0 ,4";
	@asm "la $a0 ,newline";
	@asm "syscall";
}
+(void) println:(NSString)parameter
{
	@asm "li $v0 ,4";
 	@asm "lw $a0 ,-8($fp)";
	@asm "syscall";
	@asm "li $v0 ,4";
	@asm "la $a0 ,newline";
	@asm "syscall";
}
+(void) println:(char)parameter
{
	@asm "li $v0, 12";
	@asm "lw $a0 ,-8($fp)";
	@asm "syscall";
	@asm "li $v0 ,4";
	@asm "la $a0 ,newline";
	@asm "syscall";
}
+(int) readint
{
        
        @asm "li $v0, 5";
        @asm "syscall";
}
+(float) readfloat
{
        
        @asm "li $v0, 6";
        @asm "syscall";
}
+(NSString) readstring
{
        
     @asm "li $v0,8"      ;
     @asm "syscall";
    
}
+(char) readchar
{
        
     @asm "li $v0,12"     ; 
     @asm "syscall";
    
}



@end

@interface NSException
{
NSString msg;
}
+(NSException*) withMsg:(NSString)m;

@end
@implementation NSException
+(NSException*) withMsg:(NSString)m
{
	NSException* a=[self alloc];
	a.msg=m;
	return a;
}
-(void) setMsg:(NSString)m
{
	msg=m;
}
@end
@interface NSExceptionCatcher
{
NSObject* ex;
NSExceptionCatcher* parent;
int sp;
int fp;
int backl;
int ra;
}
-(void) catch:(NSException*)e;
+(NSExceptionCatcher*) new:(NSObject*)e:(NSExceptionCatcher*) p:(int)s :(int) f :(int)l:(int)r;
@end
@implementation NSExceptionCatcher
-(void) catch:(NSException*)e
{
	if([ex isA:e])
	{
		[System println:"catched exception:"];	
		[System println:e.msg];
		e;
		@asm "lw $s0,-4($sp)";

		sp;
		@asm "lw $sp,-4($sp)";
		ra;
		@asm "lw $ra,-4($sp)";
		backl;
		@asm "lw $s1,-4($sp)";	
		fp;
		@asm "lw $fp,-4($sp)";	

		@asm "jr  $s1";	
			
	}
	else{
	[parent catch:e];
	}
}
+(NSExceptionCatcher*) new:(NSObject*)e:(NSExceptionCatcher*) p:(int)s :(int) f :(int)l:(int)r{
	NSExceptionCatcher* t=[self alloc];
	t.ex=e;
	t.sp=s;
	t.parent=p;
	t.fp=f;
	t.backl=l;
	t.ra=r;
	return t;
}
@end